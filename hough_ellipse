#!/usr/bin/env python
# -*- coding: utf-8 -*-
import matplotlib.pyplot as plt

from skimage import data, color
from skimage.filter import canny
from skimage.transform import hough_ellipse
from skimage.transform import resize
from skimage.draw import ellipse_perimeter
from skimage import io
from skimage.viewer import ImageViewer
import cv2

import time
import numpy as np

scalefactor = np.float(1)

img = cv2.imread('../data/maya/ortho_z4_f5_s024/left/left01.tif', 0)

start = time.clock()
# img_RGB = cv2.cvtColor(img_BGR,cv2.COLOR_BGR2RGB)
cimg = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
# height, width, depth = img_BGR.shape
# camera_float = util.img_as_float(camera)

# img_eye = resize(img_RGB, (height / scalefactor, width / scalefactor), order=3, mode='constant', cval=0.0)
cimg_resized = cv2.resize(cimg, (0, 0), fx=(1/scalefactor), fy=(1/scalefactor))

cimg_gray = color.rgb2gray(cimg_resized)
edges = canny(cimg_gray, sigma=2.5, low_threshold=0.4, high_threshold=0.9)
# viewer = ImageViewer(edges)
# viewer.show()

# Perform a Hough Transform
# The accuracy corresponds to the bin size of a major axis.
# The value is chosen in order to get a single high accumulator.
# The threshold eliminates low accumulators
result = hough_ellipse(edges, accuracy=4, threshold=20, min_size= 200 / scalefactor, max_size= 240 / scalefactor)   # result = hough_ellipse(edges, accuracy=20, threshold=250, min_size=100, max_size=120) min_size: Minimal major axis length. max: Maximal minor axis length.

result.sort(order='accumulator')

# Estimated parameters for the ellipse
best = result[-1]
yc = int(best[1])
xc = int(best[2])
a = int(best[3])
b = int(best[4])
orientation = best[5]

elapsed = (time.clock() - start)
print 'elapsed time:', elapsed

# Draw the ellipse on the original image
cy, cx = ellipse_perimeter(yc, xc, a, b, orientation)
cimg_resized[cy, cx] = (0, 0, 255)
# Draw the edge (white) and the resulting ellipse (red)
edges = color.gray2rgb(edges)
edges[cy, cx] = (250, 0, 0)
viewer = ImageViewer(edges)
viewer.show()


#
# fig2, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(20, 10))
#
# ax1.set_title('Original picture')
# ax1.imshow(cimg)
#
# ax2.set_title('Edge (white) and result (red)')
# ax2.imshow(edges)
#
# plt.show()
