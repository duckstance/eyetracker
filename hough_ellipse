import matplotlib.pyplot as plt

from skimage import data, color
from skimage.filter import canny
from skimage.transform import hough_ellipse
from skimage.draw import ellipse_perimeter
from skimage import io

# Load picture, convert to grayscale and detect edges
image_rgb = data.coffee()[0:220, 160:420]
img_eye = io.imread('C:/Users/Arno/Documents/Masterarbeit/Matlab/eye_test.png')
# camera_float = util.img_as_float(camera)

image_gray = color.rgb2gray(img_eye)
edges = canny(image_gray, sigma=2.0, low_threshold=0.55, high_threshold=0.8)

# Perform a Hough Transform
# The accuracy corresponds to the bin size of a major axis.
# The value is chosen in order to get a single high accumulator.
# The threshold eliminates low accumulators
result = hough_ellipse(edges, accuracy=1, threshold=4, min_size=20, max_size=40)   # result = hough_ellipse(edges, accuracy=20, threshold=250, min_size=100, max_size=120)

result.sort(order='accumulator')

# Estimated parameters for the ellipse
best = result[-1]
yc = int(best[1])
xc = int(best[2])
a = int(best[3])
b = int(best[4])
orientation = best[5]

# Draw the ellipse on the original image
cy, cx = ellipse_perimeter(yc, xc, a, b, orientation)
img_eye[cy, cx] = (0, 0, 255)
# Draw the edge (white) and the resulting ellipse (red)
edges = color.gray2rgb(edges)
edges[cy, cx] = (250, 0, 0)

fig2, (ax1, ax2) = plt.subplots(ncols=2, nrows=1, figsize=(8, 4))

ax1.set_title('Original picture')
ax1.imshow(img_eye)

ax2.set_title('Edge (white) and result (red)')
ax2.imshow(edges)

plt.show()
