#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cv2
import numpy as np
import argparse
import glob
import os
from scipy.spatial.distance import cdist
from scipy.spatial import distance
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import time
# import functions
import pupil_detection_optimal as pupil_detection
import rough_estimation
import cPickle as pickle

import calibration
from scipy.optimize import fmin
plt.rc('text', usetex=True)
plt.rcParamsDefault

start = time.clock()    # start timer

filelist_left = []
filelist_right = []
imglist_left = []
imglist_right = []
cimglist_left = []
cimglist_right = []
pupilcenter_list_left = []
pupilcenter_list_right = []
corrected_coords_left = []
corrected_coords_right = []
corrected_coords_x = []
corrected_coords_y = []
# Mat_centers = np.zeros((5, 3), np.float32)      # Zeilen, Spalten

img_resolution_factor = 1.0

pixelpitch_sensor = 0.00015875 * img_resolution_factor  # cm/px
pixelpitch_monitor = 0.058      # cm/px
monitor_res_x = 1920.0            # px
monitor_res_y = 1080.0            # px
distance_eye_monitor = 200.0    # cm
distance_eyes = 6.4             # cm
focal_length = 5.4545 #1.4              # cm
distance_eye_camera = 4.0
eye_radius = 1.0

# Maya Kamera data
sensor_width = 0.549092588388   # cm
sensor_width_px = 3840          # px
sensor_height = 0.308864580969  # cm
sensor_height_px = 2160         # px
sensor_diagonal = 0.63          # cm


# r'../data/tests/3D/calibration/500cm/left'
# path_left = r'../data/tests/3d/f14/500cm/left'
# r'../data/tests/3d/iris/200cm/left'
# load left eye images

path_left = r'../data/tests/3D/real/500cm/left'
imglist_left = calibration.load_imgs(path_left)

# load right eye images
path_right = r'../data/tests/3D/real/500cm/right'
imglist_right = calibration.load_imgs(path_right)

number_imgs = len(imglist_left)

height, width = imglist_left[0].shape       # get image size
height /= img_resolution_factor
width /= img_resolution_factor



# calibration
Homography_left, Homography_right, distance_eyes, distance_eye_monitor, eye_radius_left, distance_eye_camera_left, \
    eye_radius_right, distance_eye_camera_right = calibration.calibrate(img_resolution_factor, eye_radius,
    distance_eyes, distance_eye_camera, distance_eye_monitor, pixelpitch_sensor, focal_length)


# # Saving
# with open('../data/tests/3d/f14/calib.pickle', 'w') as file:
#     pickle.dump([norm_factor_left, norm_factor_right, Homography_left, Homography_right, distance_eyes, distance_eye_monitor, pixelpitch_monitor, monitor_res_x, monitor_res_y], file)

# # Loading
# with open('../data/tests/3d/f14/calib.pickle') as file:
#     norm_factor_left, norm_factor_right, Homography_left, Homography_right, distance_eyes, distance_eye_monitor, pixelpitch_monitor, monitor_res_x, monitor_res_y = pickle.load(file)



# detect pupil center in left eye images
pupil_centered_left = calibration.detect_pupil_centers(imglist_left, img_resolution_factor)
# norm_factor_left = -0.00041
# norm_factor_right = -0.00041

# correct left pupil coordinates
transformed_points_left = calibration.correct_pupil_points(pupil_centered_left, Homography_left, eye_radius_left, pixelpitch_sensor, distance_eye_camera_left, focal_length)


# detect pupil center in right eye images
pupil_centered_right = calibration.detect_pupil_centers(imglist_right, img_resolution_factor)

# correct right pupil coordinates
transformed_points_right = calibration.correct_pupil_points(pupil_centered_right, Homography_right, eye_radius_right, pixelpitch_sensor, distance_eye_camera_right, focal_length)

## calculate distance
# distance = evaluation.distance_calc(transformed_points_left)

# pupil_error_left_x = np.ravel(transformed_points_left[:, 0]).reshape(number_imgs, 1)
# pupil_error_left_y = np.ravel(transformed_points_left[:, 1]).reshape(number_imgs, 1)
#
# transformed_points2_right = transformed_points_right[0]
# pupil_error_right_x = np.ravel(transformed_points2_right[:, 0]).reshape(number_imgs, 1)
# pupil_error_right_y = np.ravel(transformed_points2_right[:, 1]).reshape(number_imgs, 1)

# plot_x = pupil_error_x
# plot_y = pupil_error_y
# plot1_x = np.ravel(transformed_points2_left[:, 0]).reshape(number_imgs, 1)
# plot1_y = np.ravel(transformed_points2_left[:, 1]).reshape(number_imgs, 1)
# plot2_x = np.ravel(transformed_points2_right[:, 0]).reshape(number_imgs, 1)
# plot2_y = np.ravel(transformed_points2_right[:, 1]).reshape(number_imgs, 1)
# plt.figure(num=None, figsize=(6.5, 6), dpi=140, facecolor='w', edgecolor='k') #figsize=(7, 7),
# plt.grid(color='0.5')
# plt.axhline(0, color='k')
# plt.axvline(0, color='k')
#
# # plt.plot(plot_x,plot_y, 'kx')
# plt.plot(plot1_x, plot1_y, 'bx')
# plt.plot(plot2_x, plot2_y, 'rx')
# # plt.axis([-0.4, 0.4, -0.4, 0.4])
# plt.subplots_adjust(left=0.14, right=0.86)
# plt.xlabel('$\Delta x$ (Pixel)')
# plt.ylabel('$\Delta y$ (Pixel)')
#
# for i in range(1, number_imgs+1):
#     plt.annotate(i, xy=(plot1_x[i - 1], plot1_y[i - 1]), xytext = (-0.2, 0.2), textcoords = 'offset points', ha = 'right', va = 'bottom', color='0.4')
# # plt.savefig('foo.pdf', figsize=(7, 7), bbox_inches='tight')
# plt.show()


calib_2000_3D = np.float32([[0, 0, 10.87], [0, 0, 50], [0, 0, 100], [0, 0, 150], [0, 0, 200], [0, 0, 250],
    [0, 0, 300], [0, 0, 350], [0, 0, 400], [0, 0, 450], [0, 0, 500], [0, 0, 550],
    [0, 0, 600], [0, 0, 650], [0, 0, 700], [0, 0, 750], [0, 0, 800], [0, 0, 850],
    [0, 0, 900], [0, 0, 950], [0, 0, 1000], [0, 0, 1050], [0, 0, 1100], [0, 0, 1150],
    [0, 0, 1200], [0, 0, 1250], [0, 0, 1300], [0, 0, 1350], [0, 0, 1400], [0, 0, 1450],
    [0, 0, 1500], [0, 0, 1550], [0, 0, 1600], [0, 0, 1650], [0, 0, 1700], [0, 0, 1750],
    [0, 0, 1800], [0, 0, 1850], [0, 0, 1900], [0, 0, 1950], [0, 0, 2000]])

# define calibration points for depth = 50 cm
calib_points_50 = np.float32([[-11.52, 7.83, 50.0], [-5.76, 7.83, 50.0], [0, 7.83, 50.0], [5.76, 7.83, 50.0],
    [11.52, 7.83, 50.0], [11.52, 3.915, 50.0], [5.76, 3.915, 50.0], [0, 3.915, 50.0], [-5.76, 3.915, 50.0],
    [-11.52, 3.915, 50.0], [-11.52, 0, 50.0], [-5.76, 0, 50.0], [0, 0, 50.0], [5.76, 0, 50.0], [11.52, 0, 50.0],
    [11.52, -3.915, 50.0], [5.76, -3.915, 50.0], [0, -3.915, 50.0], [-5.76, -3.915, 50.0], [-11.52, -3.915, 50.0],
    [-11.52, -7.83, 50.0], [-5.76, -7.83, 50.0], [0, -7.83, 50.0], [5.76, -7.83, 50.0], [11.52, -7.83, 50.0]])

# define calibration points for depth = 500 cm
calib_points_500 = np.float32([[-134.4, 78.3, 500], [-67.2, 78.3, 500], [0, 78.3, 500], [67.2, 78.3, 500],
    [134.4, 78.3, 500], [134.4, 39.15, 500], [67.2, 39.15, 500], [0, 39.15, 500], [-67.2, 39.15, 500],
    [-134.4, 39.15, 500], [-134.4, 0, 500], [-67.2, 0, 500], [0, 0, 500], [67.2, 0, 500],
    [134.4, 0, 500], [134.4, -39.15, 500], [67.2, -39.15, 500], [0, -39.15, 500], [-67.2, -39.15, 500],
    [-134.4, -39.15, 500], [-134.4, -78.3, 500], [-67.2, -78.3, 500], [0, -78.3, 500],
    [67.2, -78.3, 500], [134.4, -78.3, 500]])

calib_points_200 = np.float32([[-55.68, 31.32, 200], [-27.84, 31.32, 200], [0, 31.32, 200], [27.84, 31.32, 200],
    [55.68, 31.32, 200], [55.68, 15.66, 200], [27.84, 15.66, 200], [0, 15.66, 200],
    [-27.84, 15.66, 200], [-55.68, 15.66, 200], [-55.68, 0, 200], [-27.84, 0, 200],
    [0, 0, 200], [27.84, 0, 200], [55.68, 0, 200], [55.68, -15.66, 200], [27.84, -15.66, 200],
    [0, -15.66, 200], [-27.84, -15.66, 200], [-55.68, -15.66, 200], [-55.68, -31.32, 200],
    [-27.84, -31.32, 200], [0, -31.32, 200], [27.84, -31.32, 200], [55.68, -31.32, 200]])

x_3D_list = []
y_3D_list = []
z_3D_list = []


# calculate fixation depth
for i in range(number_imgs):
    # monitor centered coordinates in cm
    x_left_cm = (transformed_points_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    x_right_cm = (transformed_points_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    y_left_cm = (transformed_points_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1.0
    y_right_cm = (transformed_points_right[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1.0

    if x_left_cm - x_right_cm + distance_eyes > 0:
        z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)

    else:
        z_3D = np.inf

    x_3D = z_3D * (x_left_cm + x_right_cm) / (2.0 * distance_eye_monitor)
    y_3D = z_3D * (y_left_cm + y_right_cm) / (2.0 * distance_eye_monitor)

    x_3D_list.append(x_3D)
    y_3D_list.append(y_3D)
    z_3D_list.append(z_3D)

    print 'Image number:', i+1
    print 'Pixel Left Eye:\t\t', transformed_points_left[i, 0], 'Px\t', transformed_points_left[i, 1], 'Px'
    print 'Pixel Right Eye:\t', transformed_points_right[i, 0], 'Px\t', transformed_points_right[i, 1], 'Px'
    print 'x:', round(x_3D, 3), 'cm'
    print 'y:', round(y_3D, 3), 'cm'
    print 'z:', round(z_3D, 3), 'cm', '\n'


x_3D_mat = np.ravel(x_3D_list).reshape(number_imgs, 1)
y_3D_mat = np.ravel(y_3D_list).reshape(number_imgs, 1)
z_3D_mat = np.ravel(z_3D_list).reshape(number_imgs, 1)

points_3D = np.hstack((x_3D_mat, y_3D_mat, z_3D_mat))

error_3D = np.subtract(points_3D, calib_points_500)

error_3D_x = np.ravel(error_3D[:, 0]).reshape(number_imgs, 1)
error_3D_y = np.ravel(error_3D[:, 1]).reshape(number_imgs, 1)
error_3D_z = np.ravel(error_3D[:, 2]).reshape(number_imgs, 1)

# Euclidean distance error!
error_3D_euclid = np.sqrt(np.sum(np.square(error_3D), axis=1))

error_3D_x_mean = np.sum(np.absolute(error_3D_x)) / number_imgs
error_3D_x_min = np.min(np.absolute(error_3D_x))
error_3D_x_max = np.max(np.absolute(error_3D_x))
error_3D_x_std = np.std(np.absolute(error_3D_x))
error_3D_x_median = np.median(np.absolute(error_3D_x))

print 'Guessed Parameter:', 'Eye distance:', distance_eyes, 'Eye-Monitor-Distance:', distance_eye_monitor, 'Eye-Pupil-Radius left:', eye_radius_left, 'Eye-Camera left:', distance_eye_camera_left

print 'Error X:'
print 'Mean Error:', '\t', error_3D_x_mean
print 'Min Error:', '\t', error_3D_x_min
print 'Max Error:', '\t', error_3D_x_max
print 'Std:', '\t\t', error_3D_x_std
print 'Median:', '\t', error_3D_x_median

error_3D_y_mean = np.sum(np.absolute(error_3D_y)) / number_imgs
error_3D_y_min = np.min(np.absolute(error_3D_y))
error_3D_y_max = np.max(np.absolute(error_3D_y))
error_3D_y_std = np.std(np.absolute(error_3D_y))
error_3D_y_median = np.median(np.absolute(error_3D_y))

print '\n Error Y:'
print 'Mean Error:', '\t', error_3D_y_mean
print 'Min Error:', '\t', error_3D_y_min
print 'Max Error:', '\t', error_3D_y_max
print 'Std:', '\t\t', error_3D_y_std
print 'Median:', '\t', error_3D_y_median

error_3D_z_mean = np.sum(np.absolute(error_3D_z)) / number_imgs
error_3D_z_min = np.min(np.absolute(error_3D_z))
error_3D_z_max = np.max(np.absolute(error_3D_z))
error_3D_z_std = np.std(np.absolute(error_3D_z))
error_3D_z_median = np.median(np.absolute(error_3D_z))

print '\n Error Z:'
print 'Mean Error:', '\t', error_3D_z_mean
print 'Min Error:', '\t', error_3D_z_min
print 'Max Error:', '\t', error_3D_z_max
print 'Std:', '\t\t', error_3D_z_std
print 'Median:', '\t', error_3D_z_median


error_3D_mean = np.sum(error_3D_euclid) / number_imgs
error_3D_min = np.min(error_3D_euclid)
error_3D_max = np.max(error_3D_euclid)
error_3D_std = np.std(error_3D_euclid)
median = np.median(error_3D_euclid)

print '\n Error Euclid:'
print 'Mean Error:', '\t', error_3D_mean
print 'Min Error:', '\t', error_3D_min
print 'Max Error:', '\t', error_3D_max
print 'Std:', '\t\t', error_3D_std
print 'Median:', '\t', median

# # Saving
# with open('../data/tests/3d/plot/optimal_500cm.pickle', 'w') as file:
#     pickle.dump([error_3D_x, error_3D_y, error_3D_z], file)

# # Loading
# with open('../data/tests/3d/plot/optimal_50cm.pickle') as file:
#     error_3D_50cm_x, error_3D_50cm_y, error_3D_50cm_z = pickle.load(file)
# with open('../data/tests/3d/plot/optimal_200cm.pickle') as file:
#     error_3D_200cm_x, error_3D_200cm_y, error_3D_200cm_z = pickle.load(file)
# with open('../data/tests/3d/plot/optimal_500cm.pickle') as file:
#     error_3D_500cm_x, error_3D_500cm_y, error_3D_500cm_z = pickle.load(file)

# 3d plot
plot_x = error_3D_x
plot_y = error_3D_y
plot_z = error_3D_z


fig = plt.figure(num=None, figsize=(7, 6), dpi=120, facecolor='w', edgecolor='k')
ax = fig.add_subplot(111, projection='3d')

ax.set_xlabel('$\mathrm{\Delta x\ (cm)}$')
ax.set_ylabel('$\mathrm{\Delta z\ (cm)}$')
ax.set_zlabel('$\mathrm{\Delta y\ (cm)}$')

max_range = np.array([np.max(np.absolute(plot_x)), np.max(np.absolute(plot_y)), np.max(np.absolute(plot_z))]).max()
# max_range = np.array([np.max(np.absolute(error_3D_500cm_x)), np.max(np.absolute(error_3D_500cm_y)), np.max(np.absolute(error_3D_500cm_z))]).max()

mean_x = plot_x.mean()
mean_y = plot_y.mean()
mean_z = plot_z.mean()

ax.set_xlim(mean_x - max_range, mean_x + max_range)
ax.set_ylim(mean_y - max_range, mean_y + max_range)
ax.set_zlim(mean_z - max_range, mean_z + max_range)
# ax.set_xlim(-5, 5)
# ax.set_ylim(-5, 5)
# ax.set_zlim(-5, 5)

ax.scatter(plot_x, plot_y, plot_z, zdir=u'y', s=20, c=u'r', marker='o', depthshade=False)
# ax.scatter(error_3D_50cm_x, error_3D_50cm_y, error_3D_50cm_z, zdir=u'y', s=10, color=u'b', marker='.', depthshade=False)
# ax.scatter(error_3D_200cm_x, error_3D_200cm_y, error_3D_200cm_z, zdir=u'y', s=10, color=u'r', marker='.', depthshade=False)
# ax.scatter(error_3D_500cm_x, error_3D_500cm_y, error_3D_500cm_z, zdir=u'y', s=10, color=u'g', marker='.', depthshade=False)

cx = np.ones_like(plot_x) * ax.get_xlim()[0] + 0.04 * ax.get_xlim()[0]
cy = np.ones_like(plot_y) * ax.get_ylim()[0] + 0.04 *ax.get_ylim()[0]
cz = np.ones_like(plot_z) * ax.get_zlim()[0] * -1 - 0.04 *ax.get_zlim()[0]

ax.scatter(plot_x, cz, plot_y, c=u'k',  marker='o', lw=0, alpha=0.3)
ax.scatter(plot_x, plot_z, cy, c=u'k', marker='o', lw=0, alpha=0.3)
ax.scatter(cx, plot_z, plot_y, c=u'k',  marker='o', lw=0, alpha=0.3)


# for i in range(1, number_imgs+1):
#     ax.text(plot_x[i - 1]+0.001, plot_z[i - 1]+0.001, plot_y[i - 1]+0.001, "%d" % i, None)

# plt.hot()



plt.show()

## plot depth error 10.8 cm - 2000 cm
# plot_x = calib_2000_3D[:,2]
# plot_y = np.absolute(error_3D_z)
#
# plt.figure(num=None, figsize=(6.5, 6), dpi=140, facecolor='w', edgecolor='k') #figsize=(7, 7),
# plt.grid(color='0.5')
# plt.axhline(0, color='k')
# plt.axvline(0, color='k')
#
# plt.plot(plot_x, plot_y, 'k.-')
# # plt.plot(plot1_x,plot1_y, 'bx')
# # plt.plot(plot2_x,plot2_y, 'rx')
# # plt.axis([-0.4, 0.4, -0.4, 0.4])
# # plt.subplots_adjust(left=0.14, right=0.86)
# plt.xlabel('$\Delta \mathrm{x\ (Pixel)}$')
# plt.ylabel('$\Delta \mathrm{y\ (Pixel)}$')
#
# # plt.savefig('foo.pdf', figsize=(7, 7), bbox_inches='tight')
# plt.show()

elapsed = (time.clock() - start)
# print 'elapsed time:', elapsed

cv2.waitKey(0)
cv2.destroyAllWindows()


