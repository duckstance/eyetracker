#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cv2
import numpy as np
import argparse
import glob
import os

import pupil_detection

filelist = []
imglist = []
cimglist = []
Mat_circles = np.zeros((5, 3), np.float32)      # Zeilen, Spalten
k = 0

for root, dirs, files in os.walk(r'../data/synthetic'):     # create filelist of source images
    for file in files:
        if file.endswith('.png'):
            filelist.append(root+'/'+file)

for imagefile in filelist:                                  # load source images ans store in list
    img_load=cv2.imread(imagefile,0)
    imglist.append(img_load)

    cimg = cv2.cvtColor(img_load, cv2.COLOR_GRAY2BGR)
    cimglist.append(cimg)

height, width = img_load.shape                              # Bildgröße speichern
white_img = np.zeros((1000, 1000, 3), np.uint8)             # create blank image
white_img[:] = (255, 255, 255)

pupil_detection.resizeImg(cimglist[0])

# edges = cv2.Canny(img, 30, 60)

for img in imglist:

    circles = cv2.HoughCircles(img, cv2.HOUGH_GRADIENT, 1, 100, param1=50, param2=20, minRadius=20, maxRadius=40)

    if circles is not None:

        Mat_circles[k,:] = (circles[0,0])

        circles = np.uint16(np.around(circles))

        for i in circles[0, :]:
            # draw the outer circle
            cv2.circle(cimglist[k],(i[0],i[1]),i[2],(0,255,0),2)
            # draw the center of the circle
            cv2.circle(cimglist[k],(i[0],i[1]),2,(0,0,255),3)

        # cv2.imshow(str(k),cimglist[k])
        for i in circles[0,:]:
            cv2.circle(white_img,(i[0],i[1]),1,(0,0,255),2)
    else:
        print('No Circles Detected!')
    k+=1

# cv2.imshow('Gaze Koordinates',white_img)



src_Points = np.float32(Mat_circles[:, 0:2])
dst_Points = np.float32([[1, 1], [1, 3], [2, 2], [3, 1], [3, 3]])

H, mask = cv2.findHomography(src_Points, dst_Points)            # find perspective transformation Matrix H
print H

pts = np.float32(src_Points).reshape(-1, 1, 2)

if H is not None:
    Dst_Array = cv2.perspectiveTransform(pts, H)
    print Dst_Array
else:
    print('No Homography created!')



cv2.waitKey(0)
cv2.destroyAllWindows()
