#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cv2
import numpy as np
import argparse
import glob
import os
from scipy.spatial.distance import cdist
from scipy.spatial import distance
import matplotlib.pyplot as plt
import time
# import functions
import pupil_detection_optimal as pupil_detection
import rough_estimation
import evaluation,evaluation_angle,evaluation_corrected
from scipy.optimize import fmin

from scipy.optimize import minimize
# from pylab import *
# plt.rc('text', usetex=True)


def calibrate(img_resolution_factor):

    filelist = []
    imglist = []
    cimglist = []
    pupilcenter_list = []

    # Mat_centers = np.zeros((5, 3), np.float32)    # Zeilen, Spalten

    pixelpitch_monitor = 0.058  # cm/px
    pixelpitch_sensor = 0.00015875
    distance_eye_monitor = 200.0

    # Maya Kamera data
    focal_lenght = 3.8              # cm
    sensor_width = 0.549092588388   # cm
    sensor_width_px = 3840          # px
    sensor_height = 0.308864580969  # cm
    sensor_height_px = 2160         # px
    sensor_diagonal = 0.63          # cm


    pupilcenter_list_left = []
    pupilcenter_list_right = []
    corrected_coords_left = []
    corrected_coords_right = []

    distance_eyes = 6.4
    distance_eye_monitor = 200.0
    pixelpitch_monitor = 0.058

    # define the 25 calibration points in pixel coordinates
    calib_points_px_200 = np.float32([[0, 0],     [480, 0],    [960, 0],    [1440, 0],    [1920, 0],
                                     [1920, 270], [1440, 270], [960, 270],  [480, 270],   [0, 270],
                                     [0, 540],    [480, 540],  [960, 540],  [1440, 540],  [1920, 540],
                                     [1920, 810], [1440, 810], [960, 810],  [480, 810],   [0, 810],
                                     [0, 1080],   [480, 1080], [960, 1080], [1440, 1080], [1920, 1080]])

    # define depth calibration points
    calib_3D = np.float32([[0, 0, 10.870], [0, 0, 50], [0, 0, 100], [0, 0, 150], [0, 0, 200], [0, 0, 250], [0, 0, 300], [0, 0, 500], [0, 0, 1000], [0, 0, 5000]])

    # define calibration points for depth = 200 cm
    calib_points_200 = np.float32([[-55.68, 31.32, 200], [-27.84, 31.32, 200], [0, 31.32, 200], [27.84, 31.32, 200],
        [55.68, 31.32, 200], [55.68, 15.66, 200], [27.84, 15.66, 200], [0, 15.66, 200],
        [-27.84, 15.66, 200], [-55.68, 15.66, 200], [-55.68, 0, 200], [-27.84, 0, 200],
        [0, 0, 200], [27.84, 0, 200], [55.68, 0, 200], [55.68, -15.66, 200], [27.84, -15.66, 200],
        [0, -15.66, 200], [-27.84, -15.66, 200], [-55.68, -15.66, 200], [-55.68, -31.32, 200],
        [-27.84, -31.32, 200], [0, -31.32, 200], [27.84, -31.32, 200], [55.68, -31.32, 200]])

    # define calibration points for depth = 50 cm
    calib_points_50 = np.float32([[-11.52, 7.83, 50.0], [-5.76, 7.83, 50.0], [0, 7.83, 50.0], [5.76, 7.83, 50.0],
            [11.52, 7.83, 50.0], [11.52, 3.915, 50.0], [5.76, 3.915, 50.0], [0, 3.915, 50.0], [-5.76, 3.915, 50.0],
            [-11.52, 3.915, 50.0], [-11.52, 0, 50.0], [-5.76, 0, 50.0], [0, 0, 50.0], [5.76, 0, 50.0], [11.52, 0, 50.0],
            [11.52, -3.915, 50.0], [5.76, -3.915, 50.0], [0, -3.915, 50.0], [-5.76, -3.915, 50.0], [-11.52, -3.915, 50.0],
            [-11.52, -7.83, 50.0], [-5.76, -7.83, 50.0], [0, -7.83, 50.0], [5.76, -7.83, 50.0], [11.52, -7.83, 50.0]])

    # define calibration points for depth = 500 cm
    calib_points_500 = np.float32([[-134.4, 78.3, 500], [-67.2, 78.3, 500], [0, 78.3, 500], [67.2, 78.3, 500],
        [134.4, 78.3, 500], [134.4, 39.15, 500], [67.2, 39.15, 500], [0, 39.15, 500], [-67.2, 39.15, 500],
        [-134.4, 39.15, 500], [-134.4, 0, 500], [-67.2, 0, 500], [0, 0, 500], [67.2, 0, 500],
        [134.4, 0, 500], [134.4, -39.15, 500], [67.2, -39.15, 500], [0, -39.15, 500], [-67.2, -39.15, 500],
        [-134.4, -39.15, 500], [-134.4, -78.3, 500], [-67.2, -78.3, 500], [0, -78.3, 500],
        [67.2, -78.3, 500], [134.4, -78.3, 500]])

    # load left eye 3d calibration images for depth = 200 cm
    path = r'../data/tests/3d/calibration/200cm/left'
    imglist_200cm_left = load_imgs(path)

    # load right eye 3d calibration images for depth = 200 cm
    path = r'../data/tests/3d/calibration/200cm/right'
    imglist_200cm_right = load_imgs(path)

    # load left eye 3d calibration images for depth = 50 cm
    path = r'../data/tests/3d/calibration/50cm/left'
    imglist_50cm_left = load_imgs(path)

    # load right eye 3d calibration images for depth = 50 cm
    path = r'../data/tests/3d/calibration/50cm/right'
    imglist_50cm_right = load_imgs(path)

    # load left eye 3d calibration images for depth = 500 cm
    path = r'../data/tests/3d/calibration/500cm/left'
    imglist_500cm_left = load_imgs(path)

    # load right eye 3d calibration images for depth = 500 cm
    path = r'../data/tests/3d/calibration/500cm/right'
    imglist_500cm_right = load_imgs(path)

    number_imgs = len(imglist_200cm_left)
    height, width = imglist_200cm_left[0].shape       # get image size

    # detect pupil centers in left image for depth = 200 cm
    pupils_centered_200_left = detect_pupil_centers(imglist_200cm_left, img_resolution_factor)

    optimized_args_left = fmin(optimize_radialfactor, x0=1.0, xtol=1e-8, args=(pupils_centered_200_left, calib_points_px_200))
    norm_factor_left = optimized_args_left[0]
    # distance_eye_monitor = optimized_args[1]
    # pixelpitch_monitor = optimized_args[2]

    for coord in pupils_centered_200_left:

        alpha = np.arctan(np.sqrt(np.square(coord[0] * norm_factor_left) + np.square(coord[1] * norm_factor_left)))# / 1000.0)#(distance_eye_monitor / pixelpitch_monitor))
        if alpha != 0:      # avoid division by 0
            radial_correction_factor = np.tan(alpha) / np.sin(alpha)
        else:
            radial_correction_factor = 1.0

        corrected_coords_left.append(coord * radial_correction_factor)   # 1.05124209

    pupils_rad_corr_200_left = np.ravel(corrected_coords_left).reshape(25, 2)
    Homography_left, mask = cv2.findHomography(np.float32(pupils_rad_corr_200_left), calib_points_px_200)#, cv2.LMEDS)             # find perspective transformation Matrix HomographyMat

    sensor_coords_H_left = np.ravel(np.float32(pupils_rad_corr_200_left)).reshape(-1, 25, 2)

    if Homography_left is not None:
        transformed_points_left = cv2.perspectiveTransform(sensor_coords_H_left, Homography_left)
        # print dst_Array
    else:
        print('No Homography Matrix!')

    pupils_calibrated_200_left = transformed_points_left[0]

    # print calib_points_px_200, '\n', dst_Array
    error = np.matrix(np.subtract(calib_points_px_200, pupils_calibrated_200_left))            # difference between x,y coords of source points and calibrated points

    dist = np.sqrt(np.square(error[:, 0]) + np.square(error[:, 1]))     # euclidian distance between calibration points and mapped points
    max_error = np.max(dist)
    mean_error = np.sum(dist) / 25.0
    print 'Calibration Mean Error Left:', mean_error, 'Max Error:', max_error


    # detect pupil centers in right image for depth = 200 cm
    pupils_centered_200_right = detect_pupil_centers(imglist_200cm_right, img_resolution_factor)

    optimized_args_right = fmin(optimize_radialfactor, x0=1.0, xtol=1e-8, args=(pupils_centered_200_right, calib_points_px_200))
    norm_factor_right = optimized_args_right[0]
    # distance_eye_monitor = optimized_args[1]
    # pixelpitch_monitor = optimized_args[2]

    for coord in pupils_centered_200_right:

        alpha = np.arctan(np.sqrt(np.square(coord[0] * norm_factor_right) + np.square(coord[1] * norm_factor_right)))# / 1000.0)#(distance_eye_monitor / pixelpitch_monitor))
        if alpha != 0:      # avoid division by 0
            radial_correction_factor = np.tan(alpha) / np.sin(alpha)
        else:
            radial_correction_factor = 1.0

        corrected_coords_right.append(coord * radial_correction_factor)   # 1.05124209

    pupils_rad_corr_200_right = np.ravel(corrected_coords_right).reshape(25, 2)
    Homography_right, mask = cv2.findHomography(np.float32(pupils_rad_corr_200_right), calib_points_px_200)#, cv2.LMEDS)             # find perspective transformation Matrix HomographyMat

    sensor_coords_H_right = np.ravel(np.float32(pupils_rad_corr_200_right)).reshape(-1, 25, 2)

    if Homography_right is not None:
        transformed_points_right = cv2.perspectiveTransform(sensor_coords_H_right, Homography_right)
        # print dst_Array
    else:
        print('No Homography Matrix!')

    pupils_calibrated_200_right = transformed_points_right[0]

    # print calib_points_px_200, '\n', dst_Array
    error = np.matrix(np.subtract(calib_points_px_200, pupils_calibrated_200_right))            # difference between x,y coords of source points and calibrated points

    dist = np.sqrt(np.square(error[:, 0]) + np.square(error[:, 1]))     # euclidian distance between calibration points and mapped points
    max_error = np.max(dist)
    mean_error = np.sum(dist) / 25.0
    print 'Calibration Mean Error Right:', mean_error, 'Max Error:', max_error


    # detect pupil center in left eye images for depth = 50 cm
    pupils_centered_50_left = detect_pupil_centers(imglist_50cm_left, img_resolution_factor)
    # correct left pupil coordinates
    pupils_calibrated_50_left = correct_pupil_points(pupils_centered_50_left, norm_factor_left, Homography_left)

    # detect pupil center in right eye images for depth = 50 cm
    pupil_centered__50_right = detect_pupil_centers(imglist_50cm_right, img_resolution_factor)
    # correct right pupil coordinates
    pupils_calibrated_50_right = correct_pupil_points(pupil_centered__50_right, norm_factor_right, Homography_right)

    # detect pupil center in left eye images for depth = 500 cm
    pupils_centered_500_left = detect_pupil_centers(imglist_500cm_left, img_resolution_factor)
    # correct left pupil coordinates
    pupils_calibrated_500_left = correct_pupil_points(pupils_centered_500_left, norm_factor_left, Homography_left)

    # detect pupil center in right eye images for depth = 500 cm
    pupil_centered_500_right = detect_pupil_centers(imglist_500cm_right, img_resolution_factor)
    # correct right pupil coordinates
    pupils_calibrated_500_right = correct_pupil_points(pupil_centered_500_right, norm_factor_right, Homography_right)

    x0 = np.float32([[distance_eyes], [distance_eye_monitor]])
    optimized_args = fmin(optimize_3D, x0, xtol=1e-8, args=(pupils_calibrated_50_left, pupils_calibrated_50_right,
                                                            pupils_calibrated_200_left, pupils_calibrated_200_right,
                                                            pupils_calibrated_500_left, pupils_calibrated_500_right,
                                                            calib_points_50, calib_points_200, calib_points_500))

    distance_eyes = optimized_args[0]
    distance_eye_monitor = optimized_args[1]



    # x_3D_50_list = []
    # y_3D_50_list = []
    # z_3D_50_list = []
    # x_3D_200_list = []
    # y_3D_200_list = []
    # z_3D_200_list = []
    # x_3D_500_list = []
    # y_3D_500_list = []
    # z_3D_500_list = []
    # monitor_res_x = 1920.0
    # monitor_res_y = 1080.0
    # pixelpitch_monitor = 0.058
    #
    #
    # coords_50_left = pupils_calibrated_50_left
    # coords_50_right = pupils_calibrated_50_right
    # coords_200_left = pupils_calibrated_200_left
    # coords_200_right = pupils_calibrated_200_right
    # coords_500_left = pupils_calibrated_500_left
    # coords_500_right = pupils_calibrated_500_right
    # calib_50 = calib_points_50
    # calib_200 = calib_points_200
    # calib_500 = calib_points_500
    #
    #
    # length = len(coords_200_left)
    #
    # #50
    # for i in range(length):
    #     x_left_cm = (coords_50_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    #     x_right_cm = (coords_50_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    #     y_left_cm = (coords_50_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
    #     y_right_cm = (coords_50_right[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
    #
    #     z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)
    #     z_3D_50_list.append(z_3D)
    #
    #     x_3D = z_3D * (x_left_cm + x_right_cm) / (2 * distance_eye_monitor)
    #     x_3D_50_list.append(x_3D)
    #
    #     y_3D = z_3D * (y_left_cm + y_right_cm) / (2 * distance_eye_monitor)
    #     y_3D_50_list.append(y_3D)
    #
    # x_3D_50_mat = np.ravel(x_3D_50_list).reshape(length, 1)
    # y_3D_50_mat = np.ravel(y_3D_50_list).reshape(length, 1)
    # z_3D_50_mat = np.ravel(z_3D_50_list).reshape(length, 1)
    #
    # points_50_3D = np.hstack((x_3D_50_mat, y_3D_50_mat, z_3D_50_mat))
    # error_50_3D = np.sqrt(np.sum(np.square(np.matrix(np.subtract(calib_50, points_50_3D))), axis=1))
    #
    # #200
    # for i in range(length):
    #     x_left_cm = (coords_200_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    #     x_right_cm = (coords_200_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    #     y_left_cm = (coords_200_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
    #     y_right_cm = (coords_200_right[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
    #
    #     z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)
    #     z_3D_200_list.append(z_3D)
    #
    #     x_3D = z_3D * (x_left_cm + x_right_cm) / (2 * distance_eye_monitor)
    #     x_3D_200_list.append(x_3D)
    #
    #     y_3D = z_3D * (y_left_cm + y_right_cm) / (2 * distance_eye_monitor)
    #     y_3D_200_list.append(y_3D)
    #
    # x_3D_200_mat = np.ravel(x_3D_200_list).reshape(length, 1)
    # y_3D_200_mat = np.ravel(y_3D_200_list).reshape(length, 1)
    # z_3D_200_mat = np.ravel(z_3D_200_list).reshape(length, 1)
    #
    # points_200_3D = np.hstack((x_3D_200_mat, y_3D_200_mat, z_3D_200_mat))
    # error_200_3D = np.sqrt(np.sum(np.square(np.matrix(np.subtract(calib_200, points_200_3D))), axis=1))
    #
    # #500
    # for i in range(length):
    #     x_left_cm = (coords_500_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    #     x_right_cm = (coords_500_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
    #     y_left_cm = (coords_500_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
    #     y_right_cm = (coords_500_right[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
    #
    #     z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)
    #     z_3D_500_list.append(z_3D)
    #
    #     x_3D = z_3D * (x_left_cm + x_right_cm) / (2 * distance_eye_monitor)
    #     x_3D_500_list.append(x_3D)
    #
    #     y_3D = z_3D * (y_left_cm + y_right_cm) / (2 * distance_eye_monitor)
    #     y_3D_500_list.append(y_3D)
    #
    # x_3D_500_mat = np.ravel(x_3D_500_list).reshape(length, 1)
    # y_3D_500_mat = np.ravel(y_3D_500_list).reshape(length, 1)
    # z_3D_500_mat = np.ravel(z_3D_500_list).reshape(length, 1)
    #
    # points_500_3D = np.hstack((x_3D_500_mat, y_3D_500_mat, z_3D_500_mat))
    # error_500_3D = np.sqrt(np.sum(np.square(np.matrix(np.subtract(calib_500, points_500_3D))), axis=1))
    #
    # # error_sum_sq = np.sum(np.square(error_50_3D)) + np.sum(np.square(error_200_3D)) + np.sum(np.square(error_500_3D))
    # error_sum_sq = np.sum(np.square(error_200_3D))

    # pupil_error = np.subtract(calib_200, points_200_3D)   # choose left or right eye coords     np.multiply(pupil_measured, image_resolution_divider)
    # # print pupil_measured
    # pupil_error_x = np.ravel(pupil_error[:, 0]).reshape(length, 1)
    # pupil_error_y = np.ravel(pupil_error[:, 1]).reshape(length, 1)
    #
    # plot_x = pupil_error_x
    # plot_y = pupil_error_y
    #
    # plt.figure(num=None, figsize=(6.5, 6), dpi=140, facecolor='w', edgecolor='k') #figsize=(7, 7),
    # plt.grid(color='0.5')
    # plt.axhline(0, color='k')
    # plt.axvline(0, color='k')
    #
    # plt.plot(plot_x,plot_y, 'kx')
    # # plt.plot(plot1_x,plot1_y, 'bx')
    # # plt.plot(plot2_x,plot2_y, 'rx')
    # # plt.axis([-0.4, 0.4, -0.4, 0.4])
    # plt.subplots_adjust(left=0.14, right=0.86)
    # plt.xlabel('$\Delta \mathrm{x\ (Pixel)}$')
    # plt.ylabel('$\Delta \mathrm{y\ (Pixel)}$')
    #
    # for i in range(1,26):
    #     plt.annotate(i, xy=(plot_x[i - 1], plot_y[i - 1]), xytext = (-0.2, 0.2), textcoords = 'offset points', ha = 'right', va = 'bottom', color='0.4')
    # # plt.savefig('foo.pdf', figsize=(7, 7), bbox_inches='tight')
    # plt.show()
    print distance_eyes, distance_eye_monitor
    return norm_factor_left, norm_factor_left, Homography_left, Homography_right, distance_eyes, distance_eye_monitor


# modelfunktion for 3D optimization
def optimize_3D(x, *args):
    x_3D_50_list = []
    y_3D_50_list = []
    z_3D_50_list = []
    x_3D_200_list = []
    y_3D_200_list = []
    z_3D_200_list = []
    x_3D_500_list = []
    y_3D_500_list = []
    z_3D_500_list = []
    monitor_res_x = 1920.0
    monitor_res_y = 1080.0
    pixelpitch_monitor = 0.058


    coords_50_left = args[0]
    coords_50_right = args[1]
    coords_200_left = args[2]
    coords_200_right = args[3]
    coords_500_left = args[4]
    coords_500_right = args[5]
    calib_50 = args[6]
    calib_200 = args[7]
    calib_500 = args[8]

    distance_eyes = x[0]
    distance_eye_monitor = x[1]

    length = len(coords_200_left)

    #50
    for i in range(length):
        x_left_cm = (coords_50_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        x_right_cm = (coords_50_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        y_left_cm = (coords_50_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
        y_right_cm = (coords_50_right[i, 1] - monitor_res_y / 2) * pixelpitch_monitor * -1

        z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)
        z_3D_50_list.append(z_3D)

        x_3D = z_3D * (x_left_cm + x_right_cm) / (2 * distance_eye_monitor)
        x_3D_50_list.append(x_3D)

        y_3D = z_3D * (y_left_cm + y_right_cm) / (2 * distance_eye_monitor)
        y_3D_50_list.append(y_3D)

    x_3D_50_mat = np.ravel(x_3D_50_list).reshape(length, 1)
    y_3D_50_mat = np.ravel(y_3D_50_list).reshape(length, 1)
    z_3D_50_mat = np.ravel(z_3D_50_list).reshape(length, 1)

    points_50_3D = np.hstack((x_3D_50_mat, y_3D_50_mat, z_3D_50_mat))
    error_50_3D = np.sqrt(np.sum(np.square(np.matrix(np.subtract(calib_50, points_50_3D))), axis=1))

    #200
    for i in range(length):
        x_left_cm = (coords_200_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        x_right_cm = (coords_200_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        y_left_cm = (coords_200_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
        y_right_cm = (coords_200_right[i, 1] - monitor_res_y / 2) * pixelpitch_monitor * -1

        z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)
        z_3D_200_list.append(z_3D)

        x_3D = z_3D * (x_left_cm + x_right_cm) / (2 * distance_eye_monitor)
        x_3D_200_list.append(x_3D)

        y_3D = z_3D * (y_left_cm + y_right_cm) / (2 * distance_eye_monitor)
        y_3D_200_list.append(y_3D)

    x_3D_200_mat = np.ravel(x_3D_200_list).reshape(length, 1)
    y_3D_200_mat = np.ravel(y_3D_200_list).reshape(length, 1)
    z_3D_200_mat = np.ravel(z_3D_200_list).reshape(length, 1)

    points_200_3D = np.hstack((x_3D_200_mat, y_3D_200_mat, z_3D_200_mat))
    error_200_3D = np.sqrt(np.sum(np.square(np.matrix(np.subtract(calib_200, points_200_3D))), axis=1))

    #500
    for i in range(length):
        x_left_cm = (coords_500_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        x_right_cm = (coords_500_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        y_left_cm = (coords_500_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor * -1
        y_right_cm = (coords_500_right[i, 1] - monitor_res_y / 2) * pixelpitch_monitor * -1

        z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)
        z_3D_500_list.append(z_3D)

        x_3D = z_3D * (x_left_cm + x_right_cm) / (2 * distance_eye_monitor)
        x_3D_500_list.append(x_3D)

        y_3D = z_3D * (y_left_cm + y_right_cm) / (2 * distance_eye_monitor)
        y_3D_500_list.append(y_3D)

    x_3D_500_mat = np.ravel(x_3D_500_list).reshape(length, 1)
    y_3D_500_mat = np.ravel(y_3D_500_list).reshape(length, 1)
    z_3D_500_mat = np.ravel(z_3D_500_list).reshape(length, 1)

    points_500_3D = np.hstack((x_3D_500_mat, y_3D_500_mat, z_3D_500_mat))
    error_500_3D = np.sqrt(np.sum(np.square(np.matrix(np.subtract(calib_500, points_500_3D))), axis=1))

    error_sum_sq = np.sum(np.square(error_50_3D)) + np.sum(np.square(error_200_3D)) + np.sum(np.square(error_500_3D))


    # pupil_error = np.subtract(calib_200, points_200_3D)   # choose left or right eye coords     np.multiply(pupil_measured, image_resolution_divider)
    # # print pupil_measured
    # pupil_error_x = np.ravel(pupil_error[:, 0]).reshape(length, 1)
    # pupil_error_y = np.ravel(pupil_error[:, 1]).reshape(length, 1)
    #
    # plot_x = pupil_error_x
    # plot_y = pupil_error_y
    #
    # plt.figure(num=None, figsize=(6.5, 6), dpi=140, facecolor='w', edgecolor='k') #figsize=(7, 7),
    # plt.grid(color='0.5')
    # plt.axhline(0, color='k')
    # plt.axvline(0, color='k')
    #
    # plt.plot(plot_x,plot_y, 'kx')
    # # plt.plot(plot1_x,plot1_y, 'bx')
    # # plt.plot(plot2_x,plot2_y, 'rx')
    # # plt.axis([-0.4, 0.4, -0.4, 0.4])
    # plt.subplots_adjust(left=0.14, right=0.86)
    # plt.xlabel('$\Delta \mathrm{x\ (Pixel)}$')
    # plt.ylabel('$\Delta \mathrm{y\ (Pixel)}$')
    #
    # for i in range(1,26):
    #     plt.annotate(i, xy=(plot_x[i - 1], plot_y[i - 1]), xytext = (-0.2, 0.2), textcoords = 'offset points', ha = 'right', va = 'bottom', color='0.4')
    # # plt.savefig('foo.pdf', figsize=(7, 7), bbox_inches='tight')
    # plt.show()

    return error_sum_sq


# modelfunktion for radial error optimization
def optimize_radialfactor(x, *args):
    pupil_centered = args[0]
    calib_points_px_200 = args[1]
    norm_factor = x[0]
    # distance_eye_monitor = x[1]
    # pixelpitch_monitor = x[2]
    corrected_coords = []
    for coord in pupil_centered:

        alpha = np.arctan(np.sqrt(np.power(coord[0] * norm_factor, 2) + np.power(coord[1] * norm_factor, 2)))# / 1000.0)#(distance_eye_monitor / pixelpitch_monitor))
        if alpha != 0:      # avoid division by 0
            radial_correction_factor = np.tan(alpha) / np.sin(alpha)
        else:
            radial_correction_factor = 1.0
        corrected_coords.append(coord * radial_correction_factor) # 1.05124209

    pupils_rad_corrected = np.ravel(corrected_coords).reshape(25, 2)


    HomographyMat, mask = cv2.findHomography(np.float32(pupils_rad_corrected), calib_points_px_200)

    sensor_coords_corr = np.ravel(np.float32(pupils_rad_corrected)).reshape(-1, 25, 2)

    if HomographyMat is not None:
        transformed_points_right = cv2.perspectiveTransform(sensor_coords_corr, HomographyMat)
        # print dst_Array
    else:
        print('No Homography Matrix created!')



    # print calib_points_px_200, '\n', dst_Array
    error = np.matrix(np.subtract(calib_points_px_200, transformed_points_right))
    dist = np.sqrt(np.square(error[:, 0]) + np.square(error[:, 1]))
    dist2 = np.sum(np.square(dist))
    mean_error = np.sum(dist) / 25.0
    return dist2


# detect pupil centers function
def detect_pupil_centers(imglist, img_resolution_factor):

    pupilcenter_list = []
    number_imgs = len(imglist)
    height, width = imglist[0].shape
    height /= img_resolution_factor
    width /= img_resolution_factor

    for left_img in imglist:

        # select pupil detection method

        # center = pupil_detection.darkest_pixel(left_img, img_resolution_factor)
        # center = pupil_detection.distance_transform(left_img, img_resolution_factor)
        center = pupil_detection.center_of_mass(left_img, img_resolution_factor)
        # center = pupil_detection.edge_ellipse_fit(left_img, img_resolution_factor)
        # center = pupil_detection.ransac_ellipse_fit(left_img, img_resolution_factor)
        # center = pupil_detection.starburst(left_img, img_resolution_factor)
        # center = pupil_detection.hough_ellipse(left_img, img_resolution_factor)


        if center is not None:
            # print 'processing left image:', count, '/ 25'

            pupilcenter_list.append(center)
            # print center
        else:
            print('No Pupils Detected!')

    # rearrange pupil coordinates to camera image center origin
    pupilcenter_imgcoords = np.ravel(pupilcenter_list).reshape(number_imgs, 2)
    pupil_coords_img_x = np.reshape(pupilcenter_imgcoords[:, 0], (number_imgs, 1))
    pupil_coords_img_y = np.subtract(np.reshape(pupilcenter_imgcoords[:, 1], (number_imgs, 1)), height) * (-1)    # flip y-coordinates
    pupilcenter_coords = np.hstack((pupil_coords_img_x, pupil_coords_img_y))
    pupils_centered = np.subtract(pupilcenter_coords[:,:], ((width / 2), (height / 2)))

    return pupils_centered


def correct_pupil_points(pupil_coords_original, norm_factor, Homography):

    corrected_coords = []

    for coord in pupil_coords_original:

        alpha = np.arctan(np.sqrt(np.square(coord[0] * norm_factor) + np.square(coord[1] * norm_factor)))
        if alpha != 0:      # avoid division by 0
            radial_correction_factor = np.tan(alpha) / np.sin(alpha)
        else:
            radial_correction_factor = 1.0

        corrected_coords.append(coord * radial_correction_factor)   # 1.05124209

    pupils_radial_corrected = np.ravel(corrected_coords).reshape(25, 2)
    sensor_coords_H = np.ravel(np.float32(pupils_radial_corrected)).reshape(-1, 25, 2)

    if Homography is not None:
        transformed_points_left = cv2.perspectiveTransform(sensor_coords_H, Homography)
    else:
        print('No Homography Matrix!')

    return transformed_points_left[0]


# load images in a folder an store images into a list
def load_imgs(filename):
    filelist = []
    imglist = []
    # create filelist
    for root, dirs, imgfiles in os.walk(filename):
        for imgfile in imgfiles:
            if imgfile.endswith('.png'):
                filelist.append(root+'/'+imgfile)

    for imagefile in filelist:
        img = cv2.imread(imagefile, 0)
        imglist.append(img)

    return imglist
