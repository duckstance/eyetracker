#!/usr/bin/env python
# -*- coding: utf-8 -*-
import cv2
import numpy as np
import argparse
import glob
import os
from scipy.spatial.distance import cdist
from scipy.spatial import distance
import matplotlib.pyplot as plt
import time
# import functions
import pupil_detection_optimal as pupil_detection
import rough_estimation
import evaluation,evaluation_angle,evaluation_corrected
from scipy.optimize import fmin

from scipy.optimize import minimize
# from pylab import *
# plt.rc('text', usetex=True)

def calibrate(left_or_right, img_resolution_factor):

    filelist = []
    imglist = []
    cimglist = []
    pupilcenter_list = []
    corrected_coords = []
    corrected_coords_x = []
    corrected_coords_y = []
    # Mat_centers = np.zeros((5, 3), np.float32)    # Zeilen, Spalten

    pixelpitch_monitor = 0.058  # cm/px
    pixelpitch_sensor = 0.00015875
    distance_eye_monitor = 200.0

    # Maya Kamera data
    focal_lenght = 3.8              # cm
    sensor_width = 0.549092588388   # cm
    sensor_width_px = 3840          # px
    sensor_height = 0.308864580969  # cm
    sensor_height_px = 2160         # px
    sensor_diagonal = 0.63          # cm


    # define the 25 calibration point coordinates
    calib_points = np.float32([[0, 0],     [480, 0],   [960, 0],   [1440, 0],   [1920, 0],
                               [1920, 270],[1440, 270],[960, 270], [480, 270],  [0, 270],
                               [0, 540],   [480, 540], [960, 540], [1440, 540], [1920, 540],
                               [1920, 810],[1440, 810],[960, 810], [480, 810],  [0, 810],
                               [0, 1080],  [480, 1080],[960, 1080],[1440, 1080],[1920, 1080]])

    if left_or_right == 'left':
        # load calibration images
        for root, dirs, imgfiles in os.walk(r'../data/tests/z4_f5.4545/left'):     # create filelist of source images  z100_f18    z4_f5.4545      z4_f14      z4_45grad  photometric/noise/left
            for imgfile in imgfiles:
                if imgfile.endswith('.png'):
                    filelist.append(root+'/'+imgfile)
    if left_or_right == 'right':
        # load calibration images
        for root, dirs, imgfiles in os.walk(r'../data/tests/z4_f5.4545/right'):     # create filelist of source images  z100_f18    z4_f5.4545      z4_f14      z4_45grad  photometric/noise/left
            for imgfile in imgfiles:
                if imgfile.endswith('.png'):
                    filelist.append(root+'/'+imgfile)

    for imagefile in filelist:
        img_load = cv2.imread(imagefile, 0)
        imglist.append(img_load)
        cimg = cv2.cvtColor(img_load, cv2.COLOR_GRAY2BGR)
        cimglist.append(cimg)

    height, width = img_load.shape       # get image size
    height /= img_resolution_factor
    width /= img_resolution_factor

    count = 1
    for img in imglist:

        ## --- pupil detection method ---

        # center = pupil_detection.darkest_pixel(img, img_resolution_factor)
        # center = pupil_detection.distance_transform(img, img_resolution_factor)
        center = pupil_detection.center_of_mass(img, img_resolution_factor)
        # center = pupil_detection.edge_ellipse_fit(img, img_resolution_factor)
        # center = pupil_detection.ransac_ellipse_fit(img, img_resolution_factor)
        # center = pupil_detection.starburst(img, img_resolution_factor)
        # center = pupil_detection.hough_ellipse(img, img_resolution_factor)


        if center is not None:
            # print 'processing image:', count, '/ 25'
            count += 1
            pupilcenter_list.append(center)
            # print center
        else:
            print('No Circles Detected!')

    # center pupil coordinates to origin
    pupilcenter_imgcoords = np.ravel(pupilcenter_list).reshape(25, 2)

    pupil_coords_img_x = np.reshape(pupilcenter_imgcoords[:, 0],(25, 1)) #np.subtract(np.reshape(pupilcenter_imgcoords[:, 0],(25, 1)), width)  * (-1)    # flip x-coordinates
    pupil_coords_img_y = np.subtract(np.reshape(pupilcenter_imgcoords[:, 1],(25, 1)), height) * (-1)    # flip y-coordinates
    pupilcenter_coords = np.hstack((pupil_coords_img_x, pupil_coords_img_y))

    pupil_centered = np.subtract(pupilcenter_coords[:, :], ((width / 2), (height / 2)))  #pupil_coords = np.subtract(pupilcenter_matrix[:,:], center_coordinate)

    # # -- plot --
    # pupil_coords_x = np.ravel(pupil_centered[:, 0]).reshape(25, 1)
    # pupil_coords_y = np.ravel(pupil_centered[:, 1]).reshape(25, 1)
    #
    # plt.figure(num=None, figsize=(16, 9), dpi=250, facecolor='w', edgecolor='k')
    # plt.plot(pupil_coords_x, pupil_coords_y, 'kx')
    # # plt.axis([-5, 5, -5, 5])
    # plt.grid(color='0.5')
    # plt.xlabel('$\mathrm{X\ (Pixel)}$')
    # plt.ylabel('$\mathrm{Y\ (Pixel)}$')
    # plt.subplots_adjust(left=0.13, right=0.93, top=0.95, bottom=0.15)
    # for i in range(1, 25+1):
    #     plt.annotate(i, xy=(pupil_coords_x[i - 1], pupil_coords_y[i - 1]), xytext = (-0.2, 0.2), textcoords = 'offset points', ha = 'right', va = 'bottom', color='0.4')
    #
    # plt.show()

    # calculate target coordinates
    # [sensor_coords_left, sensor_coords_right] = evaluation_corrected.calibpoint_evaluation(calib_points, pupil_centered, img_resolution_factor)



    # temp = radial_error(x, pupil_centered, distance_eye_monitor, pixelpitch_monitor, calib_points)

    # t = np.arange(3.5, 4., 0.01)
    # for i in t:
    #     y = radial_error(i, pupil_centered, distance_eye_monitor, pixelpitch_monitor, calib_points)
    #     plt.plot(i, y, 'o-')
    #
    # plt.show()
    # --- radial distortion correction ---

    optimized_args = fmin(optimize_radialfactor, x0=1.0, xtol=1e-8, args=(pupil_centered, calib_points))
    norm_factor = optimized_args[0]
    # distance_eye_monitor = optimized_args[1]
    # pixelpitch_monitor = optimized_args[2]

    for coord in pupil_centered:

        alpha = np.arctan(np.sqrt(np.square(coord[0] * norm_factor) + np.square(coord[1] * norm_factor)))# / 1000.0)#(distance_eye_monitor / pixelpitch_monitor))
        if alpha != 0:      # avoid division by 0
            radial_correction_factor = np.tan(alpha) / np.sin(alpha)
        else:
            radial_correction_factor = 1.0

        corrected_coords.append(coord * radial_correction_factor)   # 1.05124209

    corrected_coordsmat = np.ravel(corrected_coords).reshape(25, 2)


    HomographyMat, mask = cv2.findHomography(np.float32(corrected_coordsmat), calib_points)#, cv2.LMEDS)             # find perspective transformation Matrix HomographyMat

    sensor_coords_corr = np.ravel(np.float32(corrected_coordsmat)).reshape(-1, 25, 2)

    if HomographyMat is not None:
        transformed_points = cv2.perspectiveTransform(sensor_coords_corr, HomographyMat)
        # print dst_Array
    else:
        print('No Homography Matrix created!')

        # -- plot --
    # transformed_points_plot = transformed_points[0]
    # pupil_coords_x = np.ravel(transformed_points_plot[:, 0]).reshape(25, 1)
    # pupil_coords_y = np.ravel(transformed_points_plot[:, 1]).reshape(25, 1)
    #
    # plt.figure(num=None, figsize=(16, 9), dpi=250, facecolor='w', edgecolor='k')
    # plt.plot(pupil_coords_x, pupil_coords_y, 'kx')
    # # plt.axis([-5, 5, -5, 5])
    # plt.grid(color='0.5')
    # plt.gca().invert_yaxis()
    # plt.gca().set_xticks(np.arange(0, 2350, 480))
    # plt.gca().set_yticks(np.arange(0, 1350, 270))
    # plt.xlabel('$\mathrm{X\ (Pixel)}$')
    # plt.ylabel('$\mathrm{Y\ (Pixel}$')
    # plt.subplots_adjust(left=0.13, right=0.93, top=0.95, bottom=0.15)
    # for i in range(1, 25+1):
    #     plt.annotate(i, xy=(pupil_coords_x[i - 1], pupil_coords_y[i - 1]), xytext = (-0.2, 0.2), textcoords = 'offset points', ha = 'right', va = 'bottom', color='0.4')
    #
    # plt.show()

    # print calib_points, '\n', dst_Array
    error = np.matrix(np.subtract(calib_points, transformed_points))            # difference between x,y coords of source points and calibrated points

    dist = np.sqrt(np.square(error[:, 0]) + np.square(error[:, 1]))     # euclidian distance between calibration points and mapped points
    max_error = np.max(dist)
    mean_error = np.sum(dist) / 25.0
    print 'Mean Error:', mean_error, 'Max Error:', max_error

    return norm_factor, HomographyMat


def optimize_radialfactor(x, *args):
    pupil_centered = args[0]
    calib_points = args[1]
    norm_factor = x[0]
    # distance_eye_monitor = x[1]
    # pixelpitch_monitor = x[2]
    corrected_coords = []
    for coord in pupil_centered:

        alpha = np.arctan(np.sqrt(np.power(coord[0] * norm_factor, 2) + np.power(coord[1] * norm_factor, 2)))# / 1000.0)#(distance_eye_monitor / pixelpitch_monitor))
        if alpha != 0:      # avoid division by 0
            radial_correction_factor = np.tan(alpha) / np.sin(alpha)
        else:
            radial_correction_factor = 1.0
        corrected_coords.append(coord * radial_correction_factor) # 1.05124209

    corrected_coordsmat = np.ravel(corrected_coords).reshape(25, 2)


    HomographyMat, mask = cv2.findHomography(np.float32(corrected_coordsmat), calib_points)

    sensor_coords_corr = np.ravel(np.float32(corrected_coordsmat)).reshape(-1, 25, 2)

    if HomographyMat is not None:
        transformed_points_right = cv2.perspectiveTransform(sensor_coords_corr, HomographyMat)
        # print dst_Array
    else:
        print('No Homography Matrix created!')



    # print calib_points, '\n', dst_Array
    error = np.matrix(np.subtract(calib_points, transformed_points_right))
    dist = np.sqrt(np.square(error[:, 0]) + np.square(error[:, 1]))
    dist2 = np.sum(np.square(dist))
    mean_error = np.sum(dist) / 25.0
    return dist2


def calibrate_3D(HomographyMat_left, HomographyMat_right, norm_factor_left, norm_factor_right, img_resolution_factor):

    filelist_left = []
    filelist_right = []
    imglist_left = []
    imglist_right = []
    pupilcenter_list_left = []
    pupilcenter_list_right = []
    corrected_coords_left = []
    corrected_coords_right = []

    distance_eyes = 6.4
    distance_eye_monitor = 200.0
    pixelpitch_monitor = 0.058

    calib_3D = np.float32([[0, 0, 10.870], [0, 0, 50], [0, 0, 100], [0, 0, 150], [0, 0, 200], [0, 0, 250], [0, 0, 300], [0, 0, 500], [0, 0, 1000], [0, 0, 5000]])

    # load left eye 3d calibration images
    for root, dirs, imgfiles in os.walk(r'../data/tests/3d/calibration/left'):     # create filelist of source images  z100_f18    z4_f5.4545      z4_f14      z4_45grad  photometric/noise/left
        for imgfile in imgfiles:
            if imgfile.endswith('.png'):
                filelist_left.append(root+'/'+imgfile)

    for imagefile in filelist_left:
        img = cv2.imread(imagefile, 0)
        imglist_left.append(img)


    # load right 3d calibration eye images
    for root, dirs, imgfiles in os.walk(r'../data/tests/3d/calibration/right'):     # create filelist_right of source images  z100_f18    z4_f5.4545      z4_f14      z4_45grad  photometric/noise/left
        for imgfile in imgfiles:
            if imgfile.endswith('.png'):
                filelist_right.append(root+'/'+imgfile)

    for imagefile in filelist_right:
        img = cv2.imread(imagefile, 0)
        imglist_right.append(img)


    number_imgs = len(imglist_left)

    height, width = img.shape       # get image size

    # handle left calibration images
    for left_img in imglist_left:

        ## --- pupil detection method ---

        # center = pupil_detection.darkest_pixel(left_img, img_resolution_factor)
        # center = pupil_detection.distance_transform(left_img, img_resolution_factor)
        center = pupil_detection.center_of_mass(left_img, img_resolution_factor)
        # center = pupil_detection.edge_ellipse_fit(left_img, img_resolution_factor)
        # center = pupil_detection.ransac_ellipse_fit(left_img, img_resolution_factor)
        # center = pupil_detection.starburst(left_img, img_resolution_factor)
        # center = pupil_detection.hough_ellipse(left_img, img_resolution_factor)


        if center is not None:
            # print 'processing left image:', count, '/ 25'

            pupilcenter_list_left.append(center)
            # print center
        else:
            print('No Pupils Detected!')

    # rearrange pupil coordinates to camera image center origin
    pupilcenter_imgcoords = np.ravel(pupilcenter_list_left).reshape(number_imgs, 2)
    pupil_coords_img_x = np.reshape(pupilcenter_imgcoords[:, 0], (number_imgs, 1))
    pupil_coords_img_y = np.subtract(np.reshape(pupilcenter_imgcoords[:, 1], (number_imgs, 1)), height) * (-1)    # flip y-coordinates
    pupilcenter_coords = np.hstack((pupil_coords_img_x, pupil_coords_img_y))
    pupil_centered_left = np.subtract(pupilcenter_coords[:,:], ((width / 2), (height / 2)))

    # --- radial distortion correction ---
    for coord in pupil_centered_left:
        alpha_current = np.arctan(np.sqrt((coord[0] * norm_factor_left) ** 2 + (coord[1] * norm_factor_left) ** 2) / 1000.0)
        if alpha_current == 0:      # avoid division by 0
            radial_correction_factor = 0
        else:
            radial_correction_factor = np.tan(alpha_current) / np.sin(alpha_current)
        corrected_coords_left.append(coord * radial_correction_factor) # 1.05124209
    corrected_coordsmat_left = np.ravel(corrected_coords_left).reshape(number_imgs, 2)

    sensor_coords_corr_left = np.ravel(np.float32(corrected_coordsmat_left)).reshape(-1, number_imgs, 2)

    if HomographyMat_left is not None:
        transformed_points_left = cv2.perspectiveTransform(sensor_coords_corr_left, HomographyMat_left)
        # print transformed_points_left
    else:
        print('No Homography Matrix created!')

    transformed_points2_left = transformed_points_left[0]

    # handle right calibration images
    for right_img in imglist_right:

        ## --- pupil detection method ---

        # center = pupil_detection.darkest_pixel(right_img, img_resolution_factor)
        # center = pupil_detection.distance_transform(right_img, img_resolution_factor)
        center = pupil_detection.center_of_mass(right_img, img_resolution_factor)
        # center = pupil_detection.edge_ellipse_fit(right_img, img_resolution_factor)
        # center = pupil_detection.ransac_ellipse_fit(right_img, img_resolution_factor)
        # center = pupil_detection.starburst(right_img, img_resolution_factor)
        # center = pupil_detection.hough_ellipse(right_img, img_resolution_factor)


        if center is not None:
            # print 'processing right image:', count, '/ 25'

            pupilcenter_list_right.append(center)
            # print center
        else:
            print('No Pupils Detected!')

    # rearrange pupil coordinates to camera image center origin
    pupilcenter_imgcoords = np.ravel(pupilcenter_list_right).reshape(number_imgs, 2)
    pupil_coords_img_x = np.reshape(pupilcenter_imgcoords[:, 0], (number_imgs, 1))
    pupil_coords_img_y = np.subtract(np.reshape(pupilcenter_imgcoords[:, 1], (number_imgs, 1)), height) * (-1)    # flip y-coordinates
    pupilcenter_coords = np.hstack((pupil_coords_img_x, pupil_coords_img_y))
    pupil_centered_right = np.subtract(pupilcenter_coords[:, :], ((width / 2), (height / 2)))

    # --- radial distortion correction ---
    for coord in pupil_centered_right:
        alpha_current = np.arctan(np.sqrt((coord[0] * norm_factor_right) ** 2 + (coord[1] * norm_factor_right) ** 2) / 1000.0)
        if alpha_current == 0:      # avoid division by 0
            radial_correction_factor = 0
        else:
            radial_correction_factor = np.tan(alpha_current) / np.sin(alpha_current)
        corrected_coords_right.append(coord * radial_correction_factor) # 1.05124209
    corrected_coordsmat_right = np.ravel(corrected_coords_right).reshape(number_imgs, 2)

    sensor_coords_corr_right = np.ravel(np.float32(corrected_coordsmat_right)).reshape(-1, number_imgs, 2)

    if HomographyMat_right is not None:
        transformed_points_right = cv2.perspectiveTransform(sensor_coords_corr_right, HomographyMat_right)
        # print transformed_points_right
    else:
        print('No Homography Matrix created!')

    transformed_points2_right = transformed_points_right[0]

    x0 = np.float32([[distance_eyes], [distance_eye_monitor]])
    optimized_args = fmin(optimize_3D, x0, xtol=1e-8, args=(transformed_points2_left, transformed_points2_right, calib_3D))

    # monitor_res_x = optimized_args[0]
    # monitor_res_y = optimized_args[1]
    # distance_eyes = optimized_args[2]
    # distance_eye_monitor = optimized_args[3]
    # pixelpitch_monitor = optimized_args[4]

    return optimized_args


def optimize_3D(x, *args):
    x_3D_list = []
    y_3D_list = []
    z_3D_list = []
    monitor_res_x = 1920.0
    monitor_res_y = 1080.0
    pixelpitch_monitor = 0.058


    transformed_points2_left = args[0]
    transformed_points2_right = args[1]
    calib_3D = args[2]
    distance_eyes = x[0]
    distance_eye_monitor = x[1]

    for i in range(len(transformed_points2_left)):
        x_left_cm = (transformed_points2_left[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        x_right_cm = (transformed_points2_right[i, 0] - monitor_res_x / 2.0) * pixelpitch_monitor
        y_left_cm = (transformed_points2_left[i, 1] - monitor_res_y / 2.0) * pixelpitch_monitor
        y_right_cm = (transformed_points2_right[i, 1] - monitor_res_y / 2) * pixelpitch_monitor

        z_3D = distance_eyes * distance_eye_monitor / (x_left_cm - x_right_cm + distance_eyes)
        z_3D_list.append(z_3D)

        x_3D_left = (z_3D * (x_left_cm + (distance_eyes / 2)) / distance_eye_monitor) - (distance_eyes / 2)
        x_3D_right = (z_3D * (x_right_cm - (distance_eyes / 2)) / distance_eye_monitor) + (distance_eyes / 2)
        x_3D = (x_3D_left + x_3D_right) / 2.0
        x_3D_list.append(x_3D)

        y_3D_left = z_3D * y_left_cm / distance_eye_monitor
        y_3D_right = z_3D * y_right_cm / distance_eye_monitor
        y_3D = (y_3D_left + y_3D_right) / 2.0
        y_3D_list.append(y_3D)

    x_3D_mat = np.ravel(x_3D_list).reshape(len(transformed_points2_left), 1)
    y_3D_mat = np.ravel(y_3D_list).reshape(len(transformed_points2_left), 1)
    z_3D_mat = np.ravel(z_3D_list).reshape(len(transformed_points2_left), 1)

    points_3D = np.hstack((x_3D_mat, y_3D_mat, z_3D_mat))
    error_3D = np.sqrt(np.sum(np.square(np.matrix(np.subtract(calib_3D, points_3D))), axis=1))

    error_sum_sq = np.sum(np.square(error_3D))

    return error_sum_sq
