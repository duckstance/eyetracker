#!/usr/bin/env python
# -*- coding: utf-8 -*-
import numpy as np
import cv2
import cv2.cv as cv
import time
import matplotlib.pyplot as plt

import rough_estimation

def camera_calc(target_points):

    sensor_coords_list = []
    # 50 inch Full HD Monitor / all in cm
    monitor_height = 62.2631774333
    monitor_width = 110.690093215
    monitor_diagonal = 127
    pixelpitch_monitor = 0.0576510902161  # cm/px

    # Maya Kamera data / all in cm
    focal_lenght = 3.8
    sensor_width = 0.549092588388
    sensor_width_px = 3840
    sensor_height = 0.308864580969
    sensor_height_px = 2160
    sensor_diagonal = 0.63
    pixelpitch_sensor = 0.000142992861559

    # eye data
    eye_radius = 1.165
    iris_radius = 0.655
    # pupill_radius = 0.232
    eye_offset = 3.2
    # distance_pupill_camera =
    distance_eye_camera = 25
    # distance_pupill_monitor =
    distance_eye_pupill = 0.963431367561
    distance_eye_monitor = 200


    # target_points = np.float64([[0, 0],     [480, 0],   [960, 0],   [1440, 0],   [1920, 0],        # for 25 points
    #                             [1920, 270],[1440, 270],[960, 270], [480, 270],  [0, 270],
    #                             [0, 540],   [480, 540], [960, 540], [1440, 540], [1920, 540],
    #                             [1920, 810],[1440, 810],[960, 810], [480, 810],  [0, 810],
    #                             [0, 1080],  [480, 1080],[960, 1080],[1440, 1080],[1920, 1080]])


    # left eye
    for point in target_points:

        a = ((point[0] - 960) * pixelpitch_monitor)
        b = (point[1] - 540) * pixelpitch_monitor * (-1)      # *-1 to invert the values to get them in a standard coordinate system
        c = eye_offset
        n = distance_eye_monitor
        r = distance_eye_pupill
        t = r / np.sqrt((a+c) ** 2 + b ** 2 + n ** 2)
        # t = np.sqrt(4 * r ** 2 * (a ** 2 + b ** 2 + n ** 2)) / (2 * (a ** 2 + b ** 2 + n ** 2))     # solve quadratic equation for +

        x1 = t * (c + a)
        x2 = t * b
        x3 = distance_eye_camera - (t * n) - 0.8

        # -----------------------------
        # gamma = np.arctan(np.sqrt(np.square(((point[0] - 960) * pixelpitch_monitor) - 3.2) + np.square((point[1] - 540) * pixelpitch_monitor)) / distance_eye_monitor)
        # gamma_deg = gamma * 180 / np.pi
        # x3 = distance_eye_camera - distance_eye_pupill * np.cos(gamma)
        #
        # alpha = np.arctan((((point[0] - 960) * pixelpitch_monitor) - 3.2) / distance_eye_monitor)
        # alpha_deg = alpha * 180 / np.pi
        # x1 = distance_eye_pupill * np.cos(gamma) * np.tan(alpha)
        #
        # beta = np.arctan(((point[1] - 540) * pixelpitch_monitor) / distance_eye_monitor)
        # beta_deg = beta * 180 / np.pi
        # x2 = distance_eye_pupill * np.cos(gamma) * np.tan(beta)


        y1 = x1 * 3.8 / x3 / pixelpitch_sensor
        y2 = x2 * 3.8 / x3 / pixelpitch_sensor

        coords = (y1, y2)
        sensor_coords_list.append(coords)


        # print x1, '\t\t', x2, '\t\t', x3, '\t\t', gamma_deg
        # print y1, y2

    sensor_coords = np.ravel(sensor_coords_list).reshape(25, 2)
    return sensor_coords
